Rotating Spheres in Blender Python - Grok
write me a program with a sphere rotating another sphere and another sphere rotating around that one in bpy blender python
python
Copy
import
bpy
import
math
# Clear existing objects
bpy.ops.
object
.select_all(action=
'SELECT'
)
bpy.ops.
object
.delete()
# Create three spheres
bpy.ops.mesh.primitive_uv_sphere_add(radius=
1
, location=(
0
,
0
,
0
))
sphere1 = bpy.context.active_object
sphere1.name =
"Sphere1"
bpy.ops.mesh.primitive_uv_sphere_add(radius=
0.5
, location=(
2
,
0
,
0
))
sphere2 = bpy.context.active_object
sphere2.name =
"Sphere2"
bpy.ops.mesh.primitive_uv_sphere_add(radius=
0.25
, location=(
2.5
,
0
,
0
))
sphere3 = bpy.context.active_object
sphere3.name =
"Sphere3"
# Set up parent-child relationships
sphere2.parent = sphere1
sphere3.parent = sphere2
# Animation settings
frame_count =
250
bpy.context.scene.frame_end = frame_count
# Animate Sphere1 (rotating on its own axis)
sphere1.rotation_euler = (
0
,
0
,
0
)
sphere1.keyframe_insert(data_path=
"rotation_euler"
, frame=
1
)
sphere1.rotation_euler = (
0
,
0
, math.radians(
360
))
sphere1.keyframe_insert(data_path=
"rotation_euler"
, frame=frame_count)
# Animate Sphere2 (rotating around Sphere1)
sphere2.rotation_euler = (
0
,
0
,
0
)
sphere2.keyframe_insert(data_path=
"rotation_euler"
, frame=
1
)
sphere2.rotation_euler = (
0
, math.radians(
360
),
0
)
sphere2.keyframe_insert(data_path=
"rotation_euler"
, frame=frame_count)
# Animate Sphere3 (rotating around Sphere2)
sphere3.rotation_euler = (
0
,
0
,
0
)
sphere3.keyframe_insert(data_path=
"rotation_euler"
, frame=
1
)
sphere3.rotation_euler = (math.radians(
360
),
0
,
0
)
sphere3.keyframe_insert(data_path=
"rotation_euler"
, frame=frame_count)
# Set interpolation to linear for smooth rotation
for
obj
in
[sphere1, sphere2, sphere3]:
fcurves = obj.animation_data.action.fcurves
for
fc
in
fcurves:
for
kp
in
fc.keyframe_points:
kp.interpolation =
'LINEAR'
# Set up a basic material for visibility
material = bpy.data.materials.new(name=
"SphereMaterial"
)
material.diffuse_color = (
0.8
,
0.2
,
0.2
,
1.0
)
for
obj
in
[sphere1, sphere2, sphere3]:
obj.data.materials.append(material)
# Add a light source
bpy.ops.
object
.light_add(
type
=
'SUN'
, location=(
5
,
5
,
5
))
# Set up the camera
bpy.ops.
object
.camera_add(location=(
5
, -
5
,
5
))
camera = bpy.context.active_object
camera.rotation_euler = (math.radians(
60
),
0
, math.radians(
45
))
# Set the camera as the active camera
bpy.context.scene.camera = camera
# Adjust render settings
bpy.context.scene.render.engine =
'CYCLES'
bpy.context.scene.render.resolution_x =
1920
bpy.context.scene.render.resolution_y =
1080
Show in sidebar
How can Grok help?
Grok 3

